import streamlit as st

def convert_number(value, base_from, base_to):
    try:
        base_dict = {"Bin√°rio": 2, "Decimal": 10, "Octal": 8, "Hexadecimal": 16}
        num = int(value, base_dict[base_from])
        if base_to == "Bin√°rio":
            return bin(num)[2:]
        elif base_to == "Decimal":
            return str(num)
        elif base_to == "Octal":
            return oct(num)[2:]
        elif base_to == "Hexadecimal":
            return hex(num)[2:].upper()
    except ValueError:
        return "Valor inv√°lido para a base selecionada."

def perform_operation(num1, num2, operation, base):
    base_dict = {"Bin√°rio": 2, "Decimal": 10, "Octal": 8, "Hexadecimal": 16}
    try:
        n1 = int(num1, base_dict[base])
        n2 = int(num2, base_dict[base])
        result = 0
        if operation == "Adi√ß√£o":
            result = n1 + n2
        elif operation == "Subtra√ß√£o":
            result = n1 - n2
        elif operation == "Multiplica√ß√£o":
            result = n1 * n2
        elif operation == "Divis√£o":
            result = n1 // n2 if n2 != 0 else "Erro: divis√£o por zero"
        else:
            return "Opera√ß√£o inv√°lida"

        if isinstance(result, str):
            return result  # Erro de divis√£o por zero

        if base == "Bin√°rio":
            return bin(result)[2:]
        elif base == "Decimal":
            return str(result)
        elif base == "Octal":
            return oct(result)[2:]
        elif base == "Hexadecimal":
            return hex(result)[2:].upper()
    except ValueError:
        return "N√∫mero inv√°lido para a base selecionada."

# --- Interface ---
st.set_page_config(page_title="Conversor de Sistemas Num√©ricos", page_icon="üßÆ", layout="centered")
st.title("üßÆ Conversor e Operador de Bases Num√©ricas")
st.markdown("Converta entre **bin√°rio**, **decimal**, **octal** e **hexadecimal** e realize opera√ß√µes b√°sicas!")
st.markdown("Integrantes do Grupo: **Marcolino Lemos**, **Loide Padre**, **Zeferino** e **Mikhail Freire**")


tabs = st.tabs(["üîÅ Conversor", "‚ûï Opera√ß√µes"])

# --- Conversor ---
with tabs[0]:
    st.header("üîÅ Conversor de Bases")
    value = st.text_input("Digite o n√∫mero:")
    base_from = st.selectbox("Converter de:", ["Bin√°rio", "Decimal", "Octal", "Hexadecimal"])
    base_to = st.selectbox("Para base:", ["Bin√°rio", "Decimal", "Octal", "Hexadecimal"])

    if st.button("Converter"):
        result = convert_number(value, base_from, base_to)
        st.success(f"Resultado: {result}")

# --- Opera√ß√µes ---
with tabs[1]:
    st.header("‚ûï Opera√ß√µes em Bases")
    base = st.selectbox("Base dos n√∫meros:", ["Bin√°rio", "Decimal", "Octal", "Hexadecimal"])
    num1 = st.text_input("N√∫mero 1:")
    num2 = st.text_input("N√∫mero 2:")
    operation = st.radio("Opera√ß√£o", ["Adi√ß√£o", "Subtra√ß√£o", "Multiplica√ß√£o", "Divis√£o"], horizontal=True)

    if st.button("Calcular"):
        result = perform_operation(num1, num2, operation, base)
        st.success(f"Resultado: {result}")
